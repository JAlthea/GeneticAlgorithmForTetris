/// @description Init

//OneBlockSize
cellSize = 32;

//window block
M = 20 + 3; N = 10;
field[M,N] = 0;
for (var i=0; i<M; i++)
	for (var j=0; j<N; j++)
		field[i,j] = -1;
		
pa[4,2] = 0;	//now block
pb[4,2] = 0;	//before block
next[4,2] = 0;	//next block
for (var i=0; i<4; i++)
	for (var j=0; j<2; j++)
	{
		pa[i,j] = 0;
		pb[i,j] = 0;
		next[i,j] = 0;
	}
	
//copy block for GA ============================
virtualField[M,N] = 0;
for (var i=0; i<M; i++)
	for (var j=0; j<N; j++)
		virtualField[i,j] = -1;
		
virtualPa[4,2] = 0;	//now block
virtualPb[4,2] = 0;	//before block
for (var i=0; i<4; i++)
	for (var j=0; j<2; j++)
	{
		virtualPa[i,j] = 0;
		virtualPb[i,j] = 0;
	}
//==============================================

//tetrominos : tetris figures
figures[7,4] = 0;
figures[0,0] = 0; figures[0,1] = 2; figures[0,2] = 4; figures[0,3] = 6; //I
figures[1,0] = 2; figures[1,1] = 4; figures[1,2] = 5; figures[1,3] = 7; //Z
figures[2,0] = 3; figures[2,1] = 5; figures[2,2] = 4; figures[2,3] = 6;	//S
figures[3,0] = 3; figures[3,1] = 5; figures[3,2] = 4; figures[3,3] = 7;	//T
figures[4,0] = 2; figures[4,1] = 3; figures[4,2] = 5; figures[4,3] = 7;	//L
figures[5,0] = 3; figures[5,1] = 5; figures[5,2] = 7; figures[5,3] = 6;	//J
figures[6,0] = 2; figures[6,1] = 3; figures[6,2] = 4; figures[6,3] = 5;	//O

//offset
frameX = 1 * cellSize;
frameY = -2 * cellSize;
startX = 4;
nextX = 12;
nextY = 2;

dx = 0;
rotate = false;
delay = 10;
delayKey = 0;
timer = 0;
mil = false;
onSpace = false;
gametimer = 0;

//Start block
randomize();
colorNum = irandom(8);	//color
n = irandom(6);			//figure
for (var i=0; i<4; i++)
{
	pa[i,0] = figures[n,i] % 2;
	pa[i,1] = floor(figures[n,i] / 2);
	
	virtualPa[i,0] = pa[i,0];	//GA는 처음 블록이 나오는 좌표를 0으로 한다.
	virtualPa[i,1] = pa[i,1];
}
//Next block
colorNum2 = irandom(8);
n2 = irandom(6);
for (var i=0; i<4; i++)
{
	next[i,0] = figures[n2,i] % 2 + nextX;
	next[i,1] = floor(figures[n2,i] / 2) + nextY;
}
//Next Rotate
p = [next[1,0], next[1,1]];
for (var i=0; i<4; i++)
{
	var cx = next[i,1] - p[1];
	var cy = next[i,0] - p[0];
	next[i,0] = p[0] - cx;
	next[i,1] = p[1] + cy;
}
//Next x,y
if (n2 == 0)
{
	for (var i=0; i<4; i++)
	{
		next[i,0] += 2;
		next[i,1] += 2;
	}
}
if (n2 == 1)
{
	for (var i=0; i<4; i++)
	{
		next[i,0] += 1;
	}
}
if (n2 == 2)
{
	for (var i=0; i<4; i++)
	{
		next[i,1] += 1;
	}
}
if (n2 == 3)
{
	for (var i=0; i<4; i++)
	{
		next[i,1] += 1;
	}
}
if (n2 == 4)
{
	for (var i=0; i<4; i++)
	{
		next[i,0] += 1;
		next[i,1] += 2;
	}
}
if (n2 == 5)
{
	for (var i=0; i<4; i++)
	{
		next[i,1] += 1;
	}
}
if (n2 == 6)
{
	for (var i=0; i<4; i++)
	{
		next[i,1] += 2;
	}
}


/*  Genetic algorithm  */
globalvar poolSize;
poolSize = 50;
globalvar Genes;
Genes = ds_list_create();
globalvar geneIndex;
geneIndex = 0;
for (var i=0; i<poolSize; i++)
{
    var r1 = random_range(-1, 1);
    var r2 = random_range(-1, 1);
    var r3 = random_range(-1, 1);
	var r4 = random_range(-1, 1);
	var r5 = random_range(-1, 1);
	var r6 = random_range(-1, 1);
	var r7 = random_range(-1, 1);
	var r8 = random_range(-1, 1);
    var randomWeight = [r1,r2,r3,r4,r5,r6,r7,r8];
	
    ds_list_add(Genes, getGene(randomWeight, 0, 0));	//weights(weight.count), generation, score
}

globalvar oExit;
oExit = false;
globalvar Scores;
Scores = ds_list_create();

weightCount = 8;
selectGeneCount = 5;
weights[selectGeneCount,weightCount] = 0;
generation = 0;

bestScore = 0;