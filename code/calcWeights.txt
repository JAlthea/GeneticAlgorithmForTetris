/* 가중치에 따라 구멍의 수와 높이 등을 계산하여 결과값 반환 */
var gene = ds_list_find_value(Genes, geneIndex);
var weights = gene[0];

/* 가중치들 */
var maxHeight = 0;				//블록의 최대 높이
var heightDeviation = 0;		//높이의 편차
var closeOneCount = 0;			//구멍을 막는 블록의 개수
var closeZeroCount = 0;			//갇힌구멍의 개수
var completeLine = 0;			//완성된 줄 수
var adjoinBlocks = 0;			//인접한 블록의 개수(4방향)
var countWall = 0;				//옆에 인접한 벽과 닿는 개수(4방향)
var countFloor = 0;				//아래에 인접한 바닥과 닿는 개수(4방향)

//블록의 최대 높이, 편차, 구멍을 막는 블록의 개수, 구멍의 개수를 구한다.
var heights = array_create(N);	//편차를 구하기 위한 높이의 합 
for (var j=0; j<N; j++)
{
	var heightCheck = true;
	var startBlock = 0;
	var oneCountHeight = 0;		//세로 블록의 개수
	
	for (var i=0; i<M; i++)
	{
		if (virtualField[i,j] != -1)
		{
			oneCountHeight++;
			
			if (heightCheck)
			{
				startBlock = i;
				heights[j] = M - i;
				if (maxHeight < heights[j])
					maxHeight = heights[j];
				heightCheck = false;
				continue;
			}
			else
			{
				var hole = i - (startBlock + 1);
				if (hole)
					closeOneCount += oneCountHeight;
				closeZeroCount += hole;
				startBlock = i;
			}
		}
	}
	
}

//편차 구하기
var s = 0;
for (var i=0; i<N; i++)
	s += heights[i];
var m = s / N;

var vs = 0;
for (var i=0; i<N; i++)
	vs += power(heights[i] - m, 2);
var v = vs / N;
heightDeviation = sqrt(v);

//완전한 라인 개수 구하기
for (var i=0; i<M; i++)
{
	var count = 0;
	for (var j=0; j<N; j++)
	{
		if (virtualField[i,j] != -1)
			count++;
	}
	
	if (count == N) completeLine++;
}

//인접한 블록 개수 구하기
adjoinBlocks = checkAdjoinBlock();

//인접한 벽면 타일의 개수 구하기
for (var i=0; i<4; i++)
{
	if (virtualPb[i,0] - 1 < 0) //왼쪽 벽
		countWall++;
	if (virtualPb[i,0] + 1 >= N) //오른쪽 벽 
		countWall++;
}

//인접한 바닥 타일의 개수 구하기
for (var i=0; i<4; i++)
{
	if (virtualPb[i,1] + 1 >= M) //바닥
		countFloor++;
}

return (weights[0] * maxHeight) + (weights[1] * heightDeviation) + (weights[2] * closeOneCount) + (weights[3] * closeZeroCount) + (weights[4] * completeLine) + (weights[5] * adjoinBlocks) + (weights[6] * countWall) + (weights[7] * countFloor);