for (var j=0; j<N; j++)
{
	if (field[2,j] != -1)
	{
		var g = ds_list_find_value(Genes, geneIndex);
		g[1]++;
		g[2] = gametimer;	//추후 점수계산방식을 개선
		ds_list_replace(Genes, geneIndex, getGene(g[0], g[1], g[2]));
		
		ds_list_add(Scores, g[2]);
		
		geneIndex++;
		if (geneIndex == poolSize)
		{
			/* 높은 점수를 갖는 상위 5개(selectGeneCount)의 유전자만 추출한다. */
			
			//내림차순으로 정렬한다.
			ds_list_sort(Scores, false);
			bestScore = ds_list_find_value(Scores, 0);
			
			choiceGenes[selectGeneCount] = 0;
			for (var i=0; i<selectGeneCount; i++)
			{
				choiceGenes[i] = ds_list_find_value(Scores, i);
				//show_message("best Scores : " + string(choiceGenes[i]));
			}
			
			count = array_create(selectGeneCount);
			for (var i=0; i<poolSize; i++)
			{
				var gene = ds_list_find_value(Genes, i);
				
				for (var j=0; j<selectGeneCount; j++)
				{
					if (count[j])
						continue;
					
					if (gene[2] == choiceGenes[j])
					{
						//show_message("best Scores Check : " + string(gene[2]));
						var W = gene[0];
						for (var k=0; k<weightCount; k++)
							weights[j,k] = W[k];
						
						count[j]++;
						break;
					}
				}
			}
			
			/* 교차와 변이연산을 통해서 후대의 유전자들을 대체한다. */
			ds_list_clear(Genes);
			ds_list_clear(Scores);
			generation++;
			
			//4^8 : (4개의 우수한 유전자를 골라서 가중치의 개수가 8개이므로, 골고루 섞는 경우의 수)
			
			//이전 세대의 우수한 유전자(5개)
			for (var i=0; i<selectGeneCount; i++)
			{
				var w1 = weights[i,0];
				var w2 = weights[i,1];
				var w3 = weights[i,2];
				var w4 = weights[i,3];
				var w5 = weights[i,4];
				var w6 = weights[i,5];
				var w7 = weights[i,6];
				var w8 = weights[i,7];
				var weight = [w1, w2, w3, w4, w5, w6, w7, w8];
				ds_list_add(Genes, getGene(weight, generation, 0));
			}
			
			//우수한 유전자로 교차연산된 유전자(44개)
			for (var i=0; i<poolSize - 6; i++)
			{
				var w1 = weights[irandom(selectGeneCount - 1),0]; 
				var w2 = weights[irandom(selectGeneCount - 1),1]; 
				var w3 = weights[irandom(selectGeneCount - 1),2]; 
				var w4 = weights[irandom(selectGeneCount - 1),3]; 
				var w5 = weights[irandom(selectGeneCount - 1),4]; 
				var w6 = weights[irandom(selectGeneCount - 1),5]; 
				var w7 = weights[irandom(selectGeneCount - 1),6]; 
				var w8 = weights[irandom(selectGeneCount - 1),7];
				var weight = [w1, w2, w3, w4, w5, w6, w7, w8];
				ds_list_add(Genes, getGene(weight, generation, 0));
			}
			
			//돌연변이 유전자(1개)
			var r = irandom(weightCount - 1);
			var rs = array_create(weightCount);
			for (var i=0; i<weightCount; i++)
			{
				if (r == i) rs[i] = random_range(-1, 1);
				else rs[i] = weights[irandom(selectGeneCount - 1),i];
			}
			var randomWeight = [rs[0],rs[1],rs[2],rs[3],rs[4],rs[5],rs[6],rs[7]];
			ds_list_add(Genes, getGene(randomWeight, generation, 0));
			
			/*
			for (var i=0; i<poolSize; i++)
			{
				show_message("i : " + string(i) + ", " + string(ds_list_find_value(Genes, i)));
			}
			*/
			geneIndex = 0;
		}
		
		reset();
	}
}

